colnames(dat)=name[name$GSM%in%colnames(dat),2]
dim(dat)
sex=read.table("Sex.txt",header=T,sep="\t",stringsAsFactors = F)
data=dat[,sex$sample]
datatest=data[,colnames(data)%in%sex$sample==FALSE]
dim(datatest)
dim(data)
sex$sample
colnames(dat)
datatest=dat[,colnames(dat)%in%sex$sample==FALSE]
dim(datatest)
dim(dat)
Tdata=t(data)
library(e1071)
mod <- svm(x = Tdata,y = as.factor(sex[,3]), kernel = c("linear"),
cost = 2^(-9),
gamma = 1,cross=10,
probability = TRUE,
#xtest = geno[names(ytest), -empty], ytest = ytest,
ntree = 700)
pred <- predict(mod,testdata, probability = TRUE)
res <- as.matrix(attr(pred, "probabilities")[, c("0","1")])
testdata=t(datatest)
mod
pred <- predict(mod,testdata, probability = TRUE)
res <- as.matrix(attr(pred, "probabilities")[, c("0","1")])
tab=as.data.frame(pred)
colnames(tab) <- "predicted"
tab$probility=""
tab
tab=as.data.frame(pred)
tab
tab$probility=""
for(i in 1:nrow(tab)){
tab[i,"probility"]=round(res[i,(tab[i,1])],4)
}
tab
library(pROC)
library(ggplot2)
yy=predict(mod,testdata,type="decision")
rocobj=roc(yy,sex[,3])
auc <- round(auc(yy, sex[,3]),4)
auc <- round(auc(yy, sex[,3]),4)
auc <- round(auc(yy, as.factor(sex[,3])),4)
yy
auc <- round(auc(yy, as.factor(sex[,3])),4)
ggroc(rocobj, colour = 'steelblue', size = 2) +ggtitle(paste0('ROC Curve ', '(AUC = ', auc, ')'))+theme_minimal()
rocobj=roc(yy,sex[,3])
rocobj=roc(yy,as.factor(sex[,3]))
yy
rocobj=roc(yy,as.numeric(sex[,3]))
length(yy)
yy=predict(mod,testdata,type="decision")
yy
tab
write.table(tab,"Predict-cas.txt",col.names=T,row.names=T,sep="\t",quote=F)
pred <- predict(mod,Tdata, probability = TRUE)
res <- as.matrix(attr(pred, "probabilities")[, c("0","1")])
tab=as.data.frame(pred)
colnames(tab) <- "predicted"
tab$probility=""
for(i in 1:nrow(tab)){
tab[i,"probility"]=round(res[i,(tab[i,1])],4)
}
tab
write.table(tab,"Predict-casTrue.txt",col.names=T,row.names=T,sep="\t",quote=F)
yy=predict(mod,Tdata,type="decision")
rocobj=roc(yy,as.numeric(sex[,3]))
auc <- round(auc(yy, as.factor(sex[,3])),4)
auc <- round(auc(yy, as.numeric(sex[,3])),4)
rocobj
ggroc(rocobj, colour = 'steelblue', size = 2) +ggtitle(paste0('ROC Curve ', '(AUC = ', auc, ')'))+theme_minimal()
ggsave("Sex-ROC.pdf",width=110,height=130,units="mm")
yy
age
cvfitmod = cv.glmnet(Tdata, sex[,2], family="gaussian", type.measure = "mse",alpha=0.5,nfolds=10,parallel=TRUE)
name=read.table("SampleNames.txt",header=T,sep="\t",stringsAsFactors = F )
colnames(dat)=name[name$GSM%in%colnames(dat),2]
age=read.table("SampleAge.txt",header=T,sep="\t",stringsAsFactors = F)
tis=c("Liver","Blood")
age=age[age$Tissue%in%tis,]
data=data[,age$sample]
age$sample
data[,age$sample]
data=dat[,age$sample]
dat[,age$sample]
dat=readRDS("MethRaw.rds")
name=read.table("SampleNames.txt",header=T,sep="\t",stringsAsFactors = F )
colnames(dat)=name[name$GSM%in%colnames(dat),2]
age=read.table("SampleAge.txt",header=T,sep="\t",stringsAsFactors = F)
tis=c("Liver","Blood")
age=age[age$Tissue%in%tis,]
age
data=dat[,age$sample]
Tdata=t(data)
cvfitmod = cv.glmnet(Tdata, sex[,2], family="gaussian", type.measure = "mse",alpha=0.5,nfolds=10,parallel=TRUE)
cvfitmod = cv.glmnet(Tdata, age[,2], family="gaussian", type.measure = "mse",alpha=0.5,nfolds=10,parallel=TRUE)
cvfitmod = cv.glmnet(Tdata, age[,2], family="gaussian", type.measure = "mse",alpha=0.5,nfolds=10,parallel=TRUE)
cl <- makeCluster(6)
registerDoParallel(cl)
cvfitmod = cv.glmnet(Tdata, age[,2], family="gaussian", type.measure = "mse",alpha=0.5,nfolds=10,parallel=TRUE)
stopCluster(cl)
yy=predict(cvfitmod,Tdata,type="decision")
yy=predict(cvfitmod,Tdata,type="decision")
yy=predict(cvfitmod,Tdata,type="link")
yy
rocobj=roc(yy,as.numeric(age[,2]))
age[,2]
yy
rocobj=roc(yy,as.numeric(age[,2]))
class(yy)
dim(yy)
rocobj=roc(yy,(age[,2]))
auc <- round(auc(yy, as.numeric(age[,2])),4)
ggroc(rocobj, colour = 'steelblue', size = 2) +ggtitle(paste0('ROC Curve ', '(AUC = ', auc, ')'))+theme_minimal()
ggsave("Age-ROC.pdf",width=110,height=130,units="mm")
roc(yy,(age[,2]))
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
)
library(shiny)
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
)
library(leaflet)
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
)
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite    )
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = FALSE)
)
source('C:/MapR/runMapDATAge.R')
setwd("C:\\MapR\\RevisionmapDATAge\\data")
data=read.table("mapDATAge-rs4988235_MCM6.txt",header=T,sep="\t",stringsAsFactors = F)
names(data)=stringr::str_to_title(names(data))
Mergeawsome(data,type="y")
aa=Mergeawsome(data,type="y")
aa$y_B
gridmap(aa,4,type="y")
warnings()
bb=gridmap(aa,4,type="y")
bb$y_B
aa$y_B
class(aa$y_B)
data=aa
gra=as.numeric(gra)
data$Latitude=as.numeric(data$Latitude)
data$Longitude=as.numeric(data$Longitude)
if(min(data$Latitude)>=0){
latgr=seq(0,max(data$Latitude),gra)
}else{
latgr=c(seq(floor(min(data$Latitude)),0,gra),seq(0,max(data$Latitude),gra))
}
if(min(data$Longitude)>=0){
loggr=seq(0,max(data$Longitude),gra)
}else{
loggr=c(seq(floor(min(data$Longitude)),0,gra),seq(0,ceiling(max(data$Longitude)),gra))
}
latlog=expand.grid(lat=latgr,log=loggr)
snpancname=names(data)[grep(type,names(data))]
a=matrix(0,ncol=length(snpancname)+1,nrow=nrow(latlog))
b=matrix(NA,ncol=4,nrow=nrow(latlog))
colnames(a)=c("Count",snpancname)
latlogtab=cbind(latlog$lat+(gra/2),latlog$log+(gra/2),a,b)
colnames(latlogtab)=c("Latitude","Longitude","Count",snpancname,"Sample","Age","Sex","Species")
type="y"
gra=as.numeric(gra)
data$Latitude=as.numeric(data$Latitude)
data$Longitude=as.numeric(data$Longitude)
if(min(data$Latitude)>=0){
latgr=seq(0,max(data$Latitude),gra)
}else{
latgr=c(seq(floor(min(data$Latitude)),0,gra),seq(0,max(data$Latitude),gra))
}
if(min(data$Longitude)>=0){
loggr=seq(0,max(data$Longitude),gra)
}else{
loggr=c(seq(floor(min(data$Longitude)),0,gra),seq(0,ceiling(max(data$Longitude)),gra))
}
latlog=expand.grid(lat=latgr,log=loggr)
snpancname=names(data)[grep(type,names(data))]
a=matrix(0,ncol=length(snpancname)+1,nrow=nrow(latlog))
b=matrix(NA,ncol=4,nrow=nrow(latlog))
colnames(a)=c("Count",snpancname)
latlogtab=cbind(latlog$lat+(gra/2),latlog$log+(gra/2),a,b)
colnames(latlogtab)=c("Latitude","Longitude","Count",snpancname,"Sample","Age","Sex","Species")
data$Latitude
data$Longitude
min(data$Longitude)
min(data$Latitude)
latgr
if(min(data$Latitude)>=0){
latgr=seq(0,max(data$Latitude),gra)
}else{
latgr=c(seq(floor(min(data$Latitude)),0,gra),seq(0,max(data$Latitude),gra))
}
if(min(data$Longitude)>=0){
loggr=seq(0,max(data$Longitude),gra)
}else{
loggr=c(seq(floor(min(data$Longitude)),0,gra),seq(0,ceiling(max(data$Longitude)),gra))
}
gra=4
if(min(data$Latitude)>=0){
latgr=seq(0,max(data$Latitude),gra)
}else{
latgr=c(seq(floor(min(data$Latitude)),0,gra),seq(0,max(data$Latitude),gra))
}
if(min(data$Longitude)>=0){
loggr=seq(0,max(data$Longitude),gra)
}else{
loggr=c(seq(floor(min(data$Longitude)),0,gra),seq(0,ceiling(max(data$Longitude)),gra))
}
latlog=expand.grid(lat=latgr,log=loggr)
snpancname=names(data)[grep(type,names(data))]
a=matrix(0,ncol=length(snpancname)+1,nrow=nrow(latlog))
b=matrix(NA,ncol=4,nrow=nrow(latlog))
colnames(a)=c("Count",snpancname)
latlogtab=cbind(latlog$lat+(gra/2),latlog$log+(gra/2),a,b)
colnames(latlogtab)=c("Latitude","Longitude","Count",snpancname,"Sample","Age","Sex","Species")
for(i in 1:nrow(latlogtab)){
ranks<-data[data$Longitude>=latlog[i,2] & data$Longitude<(latlog[i,2]+gra) &
data$Latitude>=latlog[i,1] & data$Latitude<(latlog[i,1]+gra),]
if(type=="Snp" && length(getsnpname(data))>0 && !is.na(ranks[1,1])){
latlogtab[i,"Count"]=as.numeric(sum(ranks$Count,na.rm=T))
charvec=c("Sample","Species","Sex")
latlogtab[i,charvec]=foreach(x=1:length(charvec), .combine=cbind) %dopar% {
latlogtab[i,charvec[x]]=stringr::str_flatten(ranks[,charvec[x]], collapse = ", ")
}
latlogtab[i,"Age"] =as.numeric(round(mean(ranks[,"Age"],na.rm=T),2))#stringr::str_flatten(ranks$Age, collapse = ", ")
#if(any(names(ranks)%in%"NON")){
# latlogtab[i,"NON"]=as.numeric(round(mean(ranks[,"NON"],na.rm=T),2))
# }
snpname=names(data)[grep("Snp",names(data))]
latlogtab[i,snpname]=foreach(x=1:length(snpname), .combine=cbind) %dopar% {
latlogtab[i,snpname[x]]=mean(ranks[,snpname[x]],na.rm=T)
}
}else if(!is.null(type) && length(grep(type,names(data)))>0 && !is.na(ranks[1,1])){
ancname=names(data)[grep(type,names(data))]
latlogtab[i,"Count"]=sum(ranks$Count,na.rm=T)
latlogtab[i,"Age"] =mean(ranks$Age, na.rm=T)
charvec=c("Sample","Species","Sex")
latlogtab[i,charvec]=foreach(x=1:length(charvec), .combine=cbind) %dopar% {
latlogtab[i,charvec[x]]=stringr::str_flatten(ranks[,charvec[x]], collapse = ", ")
}
latlogtab[i,ancname]=foreach(x=1:length(ancname), .combine=cbind) %dopar% {
latlogtab[i,ancname[x]]=as.numeric(round(mean(ranks[,ancname[x]],na.rm=T),2))
}
}
}
!is.null(type) && length(grep(type,names(data)))>0 && !is.na(ranks[1,1])
names(data)
type
grep(type,names(data))
!is.null(type) && length(grep(type,names(data)))>0 && !is.na(ranks[1,1])
!is.null(type) & length(grep(type,names(data)))>0 & !is.na(ranks[1,1])
!is.null(type) & length(grep(type,names(data)))>0
ranks[1,1]
ranks
ranks[1,1]
is.na(ranks[1,1])
bb=gridmap(aa,4,type="y")
warnings()
mean(NA,na.rm=T)
gridmap=function(data,gra,type=NULL,drop=drop){
gra=as.numeric(gra)
data$Latitude=as.numeric(data$Latitude)
data$Longitude=as.numeric(data$Longitude)
if(min(data$Latitude)>=0){
latgr=seq(0,max(data$Latitude),gra)
}else{
latgr=c(seq(floor(min(data$Latitude)),0,gra),seq(0,max(data$Latitude),gra))
}
if(min(data$Longitude)>=0){
loggr=seq(0,max(data$Longitude),gra)
}else{
loggr=c(seq(floor(min(data$Longitude)),0,gra),seq(0,ceiling(max(data$Longitude)),gra))
}
latlog=expand.grid(lat=latgr,log=loggr)
snpancname=names(data)[grep(type,names(data))]
a=matrix(0,ncol=length(snpancname)+1,nrow=nrow(latlog))
b=matrix(NA,ncol=4,nrow=nrow(latlog))
colnames(a)=c("Count",snpancname)
latlogtab=cbind(latlog$lat+(gra/2),latlog$log+(gra/2),a,b)
colnames(latlogtab)=c("Latitude","Longitude","Count",snpancname,"Sample","Age","Sex","Species")
for(i in 1:nrow(latlogtab)){
ranks<-data[data$Longitude>=latlog[i,2] & data$Longitude<(latlog[i,2]+gra) &
data$Latitude>=latlog[i,1] & data$Latitude<(latlog[i,1]+gra),]
if(type=="Snp" && length(getsnpname(data))>0 && !is.na(ranks[1,1])){
latlogtab[i,"Count"]=as.numeric(sum(ranks$Count,na.rm=T))
charvec=c("Sample","Species","Sex")
latlogtab[i,charvec]=foreach(x=1:length(charvec), .combine=cbind) %dopar% {
latlogtab[i,charvec[x]]=stringr::str_flatten(ranks[,charvec[x]], collapse = ", ")
}
latlogtab[i,"Age"] =as.numeric(round(mean(ranks[,"Age"],na.rm=T),2))#stringr::str_flatten(ranks$Age, collapse = ", ")
#if(any(names(ranks)%in%"NON")){
# latlogtab[i,"NON"]=as.numeric(round(mean(ranks[,"NON"],na.rm=T),2))
# }
snpname=names(data)[grep("Snp",names(data))]
latlogtab[i,snpname]=foreach(x=1:length(snpname), .combine=cbind) %dopar% {
latlogtab[i,snpname[x]]=mean(ranks[,snpname[x]],na.rm=T)
}
}else if(!is.null(type) && length(grep(type,names(data)))>0 && !is.na(ranks[1,1])){
ancname=names(data)[grep(type,names(data))]
latlogtab[i,"Count"]=sum(ranks$Count,na.rm=T)
latlogtab[i,"Age"] =mean(ranks$Age, na.rm=T)
charvec=c("Sample","Species","Sex")
latlogtab[i,charvec]=foreach(x=1:length(charvec), .combine=cbind) %dopar% {
latlogtab[i,charvec[x]]=stringr::str_flatten(ranks[,charvec[x]], collapse = ", ")
}
latlogtab[i,ancname]=foreach(x=1:length(ancname), .combine=cbind) %dopar% {
latlogtab[i,ancname[x]]=as.numeric(round(mean(ranks[,ancname[x]],na.rm=TRUE),2))
}
}
}
latlogtab=as.data.frame(latlogtab,stringsAsFactors=FALSE)
latlogtab$Count=as.numeric(latlogtab$Count)
latlogtab=latlogtab[latlogtab$Count>0,]
latlogtab$Site=paste("Site",seq(1,nrow(latlogtab)),sep="")
latlogtab$Latitude=as.numeric(latlogtab$Latitude)
latlogtab$Longitude=as.numeric(latlogtab$Longitude)
latlogtab[,snpancname]=apply(latlogtab[,snpancname],1,as.numeric)
latlogtab$Age=as.numeric(latlogtab$Age)
as.data.frame(latlogtab)
}
bb=gridmap(aa,4,type="y")
warnings()
data
data$y_B
data$y_C
data$y_d
data$y_D
gridmap=function(data,gra,type=NULL,drop=drop){
gra=as.numeric(gra)
data$Latitude=as.numeric(data$Latitude)
data$Longitude=as.numeric(data$Longitude)
if(min(data$Latitude)>=0){
latgr=seq(0,max(data$Latitude),gra)
}else{
latgr=c(seq(floor(min(data$Latitude)),0,gra),seq(0,max(data$Latitude),gra))
}
if(min(data$Longitude)>=0){
loggr=seq(0,max(data$Longitude),gra)
}else{
loggr=c(seq(floor(min(data$Longitude)),0,gra),seq(0,ceiling(max(data$Longitude)),gra))
}
latlog=expand.grid(lat=latgr,log=loggr)
snpancname=names(data)[grep(type,names(data))]
a=matrix(0,ncol=length(snpancname)+1,nrow=nrow(latlog))
b=matrix(NA,ncol=4,nrow=nrow(latlog))
colnames(a)=c("Count",snpancname)
latlogtab=cbind(latlog$lat+(gra/2),latlog$log+(gra/2),a,b)
colnames(latlogtab)=c("Latitude","Longitude","Count",snpancname,"Sample","Age","Sex","Species")
for(i in 1:nrow(latlogtab)){
ranks<-data[data$Longitude>=latlog[i,2] & data$Longitude<(latlog[i,2]+gra) &
data$Latitude>=latlog[i,1] & data$Latitude<(latlog[i,1]+gra),]
if(type=="Snp" && length(getsnpname(data))>0 && !is.na(ranks[1,1])){
latlogtab[i,"Count"]=as.numeric(sum(ranks$Count,na.rm=T))
charvec=c("Sample","Species","Sex")
latlogtab[i,charvec]=foreach(x=1:length(charvec), .combine=cbind) %dopar% {
latlogtab[i,charvec[x]]=stringr::str_flatten(ranks[,charvec[x]], collapse = ", ")
}
latlogtab[i,"Age"] =as.numeric(round(mean(ranks[,"Age"],na.rm=T),2))#stringr::str_flatten(ranks$Age, collapse = ", ")
#if(any(names(ranks)%in%"NON")){
# latlogtab[i,"NON"]=as.numeric(round(mean(ranks[,"NON"],na.rm=T),2))
# }
snpname=names(data)[grep("Snp",names(data))]
latlogtab[i,snpname]=foreach(x=1:length(snpname), .combine=cbind) %dopar% {
latlogtab[i,snpname[x]]=mean(ranks[,snpname[x]],na.rm=T)
}
}else if(!is.null(type) && length(grep(type,names(data)))>0 && !is.na(ranks[1,1])){
ancname=names(data)[grep(type,names(data))]
latlogtab[i,"Count"]=sum(ranks$Count,na.rm=T)
latlogtab[i,"Age"] =mean(ranks$Age, na.rm=T)
charvec=c("Sample","Species","Sex")
latlogtab[i,charvec]=foreach(x=1:length(charvec), .combine=cbind) %dopar% {
latlogtab[i,charvec[x]]=stringr::str_flatten(ranks[,charvec[x]], collapse = ", ")
}
latlogtab[i,ancname]=foreach(x=1:length(ancname), .combine=cbind) %dopar% {
latlogtab[i,ancname[x]]=as.numeric(round(mean(ranks[,ancname[x]],na.rm=TRUE),2))
}
}else{
return NULL
}
latlogtab=as.data.frame(latlogtab,stringsAsFactors=FALSE)
latlogtab$Count=as.numeric(latlogtab$Count)
latlogtab=latlogtab[latlogtab$Count>0,]
latlogtab$Site=paste("Site",seq(1,nrow(latlogtab)),sep="")
latlogtab$Latitude=as.numeric(latlogtab$Latitude)
latlogtab$Longitude=as.numeric(latlogtab$Longitude)
latlogtab[,snpancname]=apply(latlogtab[,snpancname],1,as.numeric)
latlogtab$Age=as.numeric(latlogtab$Age)
as.data.frame(latlogtab)
}
x=17
ranks<-data[data$Longitude>=latlog[i,2] & data$Longitude<(latlog[i,2]+gra) &
data$Latitude>=latlog[i,1] & data$Latitude<(latlog[i,1]+gra),]
ranks
latlog[i,]
i=17
latlog[i,]
ranks<-data[data$Longitude>=latlog[i,2] & data$Longitude<(latlog[i,2]+gra) &
data$Latitude>=latlog[i,1] & data$Latitude<(latlog[i,1]+gra),]
ranks
names(data)
data %>% select(startsWith(type))
type
data %>% select(startsWith(type))
dim(data)
class(data)
data %>% select(startsWith(type))
data %>% select(startsWith("y"))
data %>% select(startsWith(type))
names(data)
data=read.table("mapDATAge-rs4988235_MCM6.txt",header=T,sep="\t",stringsAsFactors = F)
names(data)=stringr::str_to_title(names(data))
aa=Mergeawsome(data,type="y")
names(aa)
aa$Cat_y
grep(paste("^",type,sep=""),names(data))
paste("^",type,sep="")
names(data)
cat=paste("Cat_",type,sep="")
cat
names(aa)
aa %>% select(startsWith(type))
aa %>% dplyr::select(startsWith(type))
class(aa)
aa$Cat_y
aa %>% dplyr::select(startsWith(type))
aa %>% dplyr::select(startsWith("y")
)
aa[,paste("Cat_",type,sep="")]
aa[,-paste("Cat_",type,sep="")]
aa[,-(paste("Cat_",type,sep=""))]
aa[,-cat]
cat
aa[,cat]
aa[,-cat]
aa[,!names(aa)%in%cat]
aa[,!names(aa)%in%paste("Cat_",type,sep="")]
#######plot grid in the map
gridmap=function(data,gra,type=NULL,drop=drop){
gra=as.numeric(gra)
data$Latitude=as.numeric(data$Latitude)
data$Longitude=as.numeric(data$Longitude)
data=data[,!names(data)%in%paste("Cat_",type,sep="")]
if(min(data$Latitude)>=0){
latgr=seq(0,max(data$Latitude),gra)
}else{
latgr=c(seq(floor(min(data$Latitude)),0,gra),seq(0,max(data$Latitude),gra))
}
if(min(data$Longitude)>=0){
loggr=seq(0,max(data$Longitude),gra)
}else{
loggr=c(seq(floor(min(data$Longitude)),0,gra),seq(0,ceiling(max(data$Longitude)),gra))
}
latlog=expand.grid(lat=latgr,log=loggr)
snpancname=names(data)[grep(type,names(data))]
a=matrix(0,ncol=length(snpancname)+1,nrow=nrow(latlog))
b=matrix(NA,ncol=4,nrow=nrow(latlog))
colnames(a)=c("Count",snpancname)
latlogtab=cbind(latlog$lat+(gra/2),latlog$log+(gra/2),a,b)
colnames(latlogtab)=c("Latitude","Longitude","Count",snpancname,"Sample","Age","Sex","Species")
for(i in 1:nrow(latlogtab)){
ranks<-data[data$Longitude>=latlog[i,2] & data$Longitude<(latlog[i,2]+gra) &
data$Latitude>=latlog[i,1] & data$Latitude<(latlog[i,1]+gra),]
if(type=="Snp" && length(getsnpname(data))>0 && !is.na(ranks[1,1])){
latlogtab[i,"Count"]=as.numeric(sum(ranks$Count,na.rm=T))
charvec=c("Sample","Species","Sex")
latlogtab[i,charvec]=foreach(x=1:length(charvec), .combine=cbind) %dopar% {
latlogtab[i,charvec[x]]=stringr::str_flatten(ranks[,charvec[x]], collapse = ", ")
}
latlogtab[i,"Age"] =as.numeric(round(mean(ranks[,"Age"],na.rm=T),2))#stringr::str_flatten(ranks$Age, collapse = ", ")
#if(any(names(ranks)%in%"NON")){
# latlogtab[i,"NON"]=as.numeric(round(mean(ranks[,"NON"],na.rm=T),2))
# }
snpname=names(data)[grep("Snp",names(data))]
latlogtab[i,snpname]=foreach(x=1:length(snpname), .combine=cbind) %dopar% {
latlogtab[i,snpname[x]]=mean(ranks[,snpname[x]],na.rm=T)
}
}else if(!is.null(type) && length(grep(type,names(data)))>0 && !is.na(ranks[1,1])){
ancname=names(data)[grep(type,names(data))]
latlogtab[i,"Count"]=sum(ranks$Count,na.rm=T)
latlogtab[i,"Age"] =mean(ranks$Age, na.rm=T)
charvec=c("Sample","Species","Sex")
latlogtab[i,charvec]=foreach(x=1:length(charvec), .combine=cbind) %dopar% {
latlogtab[i,charvec[x]]=stringr::str_flatten(ranks[,charvec[x]], collapse = ", ")
}
latlogtab[i,ancname]=foreach(x=1:length(ancname), .combine=cbind) %dopar% {
latlogtab[i,ancname[x]]=as.numeric(round(mean(ranks[,ancname[x]],na.rm=TRUE),2))
}
}
}
latlogtab=as.data.frame(latlogtab,stringsAsFactors=FALSE)
latlogtab$Count=as.numeric(latlogtab$Count)
latlogtab=latlogtab[latlogtab$Count>0,]
latlogtab$Site=paste("Site",seq(1,nrow(latlogtab)),sep="")
latlogtab$Latitude=as.numeric(latlogtab$Latitude)
latlogtab$Longitude=as.numeric(latlogtab$Longitude)
latlogtab[,snpancname]=apply(latlogtab[,snpancname],1,as.numeric)
latlogtab$Age=as.numeric(latlogtab$Age)
as.data.frame(latlogtab)
}
aa[,!names(aa)%in%paste("Cat_",type,sep="")]
gridmap(aa,4,type="y")
source('C:/MapR/runMapDATAge.R')
