shiny::runApp()
shiny::runUrl("https://github.com/xuefenfei712/mapDATAge/archive/refs/heads/main.zip")
sessionInfo()
shiny::runUrl("https://github.com/xuefenfei712/mapDATAge/archive/refs/heads/main.zip")
shiny::runUrl("https://github.com/xuefenfei712/mapDATAge/archive/refs/heads/main.zip")
shiny::runGitHub("mapDATAge","xuefenfei712")
shiny::runGitHub("mapDATAge","xuefenfei712", ref="main")
getwd()
srqt((0.56*0.44)/50)
sqrt((0.56*0.44)/50)
sqrt((0.6*0.94)/50)
p=0.6
X <- sample(c(0,1), size = 100, replace = TRUE, prob = c(1-p, p))
X
Hmisc::binconf(sum(X),length(X),alpha = 0.05,method = "all")
sqrt((p*(1-p)/100))
p=0.5
p=0.56
X <- sample(c(0,1), size = 100, replace = TRUE, prob = c(1-p, p))
X
Hmisc::binconf(sum(X),length(X),alpha = 0.05,method = "all")
0.56-0.457
sqrt((p*(1-p)/50))
p
X <- sample(c(0,1), size = 50, replace = TRUE, prob = c(1-p, p))
Hmisc::binconf(sum(X),length(X),alpha = 0.05,method = "all")
sqrt((p*(1-p)/50))
sqrt((0.7*(1-0.7)/10))
sqrt((0.7*(1-0.7)/50))
sqrt((0.7*(1-0.7)/5))
qnorm(0.75)
binom.test(7,10,0.7,"two.sided",0.95)
binom.test(7,10,0.5,"two.sided",0.95)
0.7-0.34
0.93-0.7
sqrt(0.7*0.3)
sqrt(0.7*0.3/10)
sqrt(0.56*0.44/50)
sqrt(0.56*0.44/50)*1.96
setwd("C:\\MapR\\mapDATAge-main\\data")
data=read.table("mapDATAge-rs4988235_MCM62121.txt",header=T,sep="\t",stringsAsFactors = F)
colnames(data)=toupper(names(data))
MergeMT=function(data,type=NULL,drop=FALSE){
chc=c("SITE","SAMPLE","SPECIES","SEX");num=c("LATITUDE","LONGITUDE","AGE")
cat=paste("CAT_",type,sep="")
d=data[,c(chc,cat,num)]
d=d[!d[,cat]%in%c("unknown",NA,"NON"),]
yname=sort(unique(d[,cat]))
d$Count=rep(1,nrow(d))
d2 <- sf::st_as_sf(d, coords = c("LONGITUDE", "LATITUDE"))
d3 <- sf::st_intersection(d2)#parallel::mclapply
list <- lapply(1:length(d3$origins), function(x) {
point <- d3[x, ]
point[,chc]=apply((data.frame(d2[d3$origins[[x]], chc])[,charvec]),2,function(x) paste(x, collapse=", "))
point$AGE <- round(mean(d2[d3$origins[[x]], ]$AGE, na.rm = TRUE),2)
point$Count <- sum(d2[d3$origins[[x]], ]$Count, na.rm = TRUE)
###character type
catyname=paste(type,"_",yname,sep="")
point[,catyname]=matrix(0,ncol=length(catyname),nrow=1)
point[,names(catsorting(data.frame(d2[d3$origins[[x]], cat][,cat])[,1],type=type))]=catsorting(data.frame(d2[d3$origins[[x]], cat][,cat])[,1],type=type)
return(point)
})
new_d <- do.call(rbind, list)
new_d$LONGITUDE <- sf::st_coordinates(new_d)[, "X"]
new_d$LATITUDE <- sf::st_coordinates(new_d)[, "Y"]
sf::st_geometry(new_d) <- NULL
as.data.frame(new_d)
new_d[,cat]=NULL
new_d$SecondSite=paste(as.character(new_d$SITE),"_layer",sep="")
as.data.frame(new_d)
}
aa=MergeMT(data,"Y")
MergeMT=function(data,type=NULL,drop=FALSE){
chc=c("SITE","SAMPLE","SPECIES","SEX");num=c("LATITUDE","LONGITUDE","AGE")
cat=paste("CAT_",type,sep="")
d=data[,c(chc,cat,num)]
d=d[!d[,cat]%in%c("unknown",NA,"NON"),]
yname=sort(unique(d[,cat]))
d$Count=rep(1,nrow(d))
d2 <- sf::st_as_sf(d, coords = c("LONGITUDE", "LATITUDE"))
d3 <- sf::st_intersection(d2)#parallel::mclapply
list <- lapply(1:length(d3$origins), function(x) {
point <- d3[x, ]
point[,chc]=apply((data.frame(d2[d3$origins[[x]], chc])[,chc]),2,function(x) paste(x, collapse=", "))
point$AGE <- round(mean(d2[d3$origins[[x]], ]$AGE, na.rm = TRUE),2)
point$Count <- sum(d2[d3$origins[[x]], ]$Count, na.rm = TRUE)
###character type
catyname=paste(type,"_",yname,sep="")
point[,catyname]=matrix(0,ncol=length(catyname),nrow=1)
point[,names(catsorting(data.frame(d2[d3$origins[[x]], cat][,cat])[,1],type=type))]=catsorting(data.frame(d2[d3$origins[[x]], cat][,cat])[,1],type=type)
return(point)
})
new_d <- do.call(rbind, list)
new_d$LONGITUDE <- sf::st_coordinates(new_d)[, "X"]
new_d$LATITUDE <- sf::st_coordinates(new_d)[, "Y"]
sf::st_geometry(new_d) <- NULL
as.data.frame(new_d)
new_d[,cat]=NULL
new_d$SecondSite=paste(as.character(new_d$SITE),"_layer",sep="")
as.data.frame(new_d)
}
aa=MergeMT(data,"Y")
catsorting=function(data,type){
sub=as.data.frame(table(data))
sub2=matrix(as.numeric(sum(sub[,2]))/length(data),ncol=nrow(sub))
colnames(sub2)=paste(type,"_",sub[,1],sep="")
data.frame(sub2)
}
aa=MergeMT(data,"Y")
#######plot grid in the map
gridmap=function(data,gra,type=NULL,drop=drop){
gra=as.numeric(gra)
data$LATITUDE=as.numeric(data$LATITUDE)
data$LONGITUDE=as.numeric(data$LONGITUDE)
if(min(data$LATITUDE)>=0){
latgr=seq(0,max(data$LATITUDE),gra)
}else{
latgr=c(seq(floor(min(data$LATITUDE)),0,gra),seq(0,max(data$LATITUDE),gra))
}
if(min(data$LONGITUDE)>=0){
loggr=seq(0,max(data$LONGITUDE),gra)
}else{
loggr=c(seq(floor(min(data$LONGITUDE)),0,gra),seq(0,ceiling(max(data$LONGITUDE)),gra))
}
latlog=expand.grid(lat=latgr,log=loggr)
if(type=="SNP" & length(getsnpname(data))>0 & length(grep("ANCE",names(data)))==0){
latlogtab=cbind(latlog$lat+(gra/2),latlog$log+(gra/2),0,0,0,0,NA,NA,NA,NA)
colnames(latlogtab)=c("LATITUDE","LONGITUDE","Count",names(data)[grep("SNP",names(data))],"NON","SAMPLE","AGE","SEX","SPECIES")
for(i in 1:nrow(latlogtab)){
ranks<-data[data$LONGITUDE>=latlog[i,2] & data$LONGITUDE<(latlog[i,2]+gra) &
data$LATITUDE>=latlog[i,1] & data$LATITUDE<(latlog[i,1]+gra),]
if(!is.na(ranks[1,1])){
latlogtab[i,"Count"]=as.numeric(sum(ranks$Count,na.rm=T))
latlogtab[i,names(data)[grep("SNP",names(data))][1]]=as.numeric(round(mean(ranks[,names(data)[grep("SNP",names(data))][1]],na.rm=T),2))
latlogtab[i,names(data)[grep("SNP",names(data))][2]]=as.numeric(round(mean(ranks[,names(data)[grep("SNP",names(data))][2]],na.rm=T),2))
if(any(names(ranks)%in%"NON")){
latlogtab[i,"NON"]=as.numeric(round(mean(ranks[,"NON"],na.rm=T),2))
}
latlogtab[i,"SAMPLE"] =stringr::str_flatten(ranks$SAMPLE, collapse = ", ")
latlogtab[i,"AGE"] =as.numeric(round(mean(ranks[,"AGE"],na.rm=T),2))#stringr::str_flatten(ranks$Age, collapse = ", ")
latlogtab[i,"SEX"] =stringr::str_flatten(ranks$SEX, collapse = ", ")
latlogtab[i,"SPECIES"] =stringr::str_flatten(ranks$SPECIES, collapse = ", ")
}
}
latlogtab=data.frame(latlogtab)
latlogtab$SITE=paste("Site",seq(1,nrow(latlogtab)),sep="")
latlogtab$SecondSite=paste("Site",seq(1,nrow(latlogtab)),sep="")
latlogtab=latlogtab[latlogtab$Count>0,]
latlogtab[,names(data)[grep("SNP",names(data))][1]]=as.numeric(latlogtab[,names(data)[grep("SNP",names(data))][1]])
latlogtab[,names(data)[grep("SNP",names(data))][2]]=as.numeric(latlogtab[,names(data)[grep("SNP",names(data))][2]])
latlogtab$LATITUDE=as.numeric(latlogtab$LATITUDE)
latlogtab$LONGITUDE=as.numeric(latlogtab$LONGITUDE)
latlogtab$AGE=as.numeric(latlogtab$AGE)
latlogtab$Count=as.numeric(latlogtab$Count)
as.data.frame(latlogtab)
}else if(!is.null(type) & length(grep(type,names(data)))>0){
ancname=names(data)[grep(type,names(data))]
a=matrix(0,ncol=length(ancname)+1,nrow=nrow(latlog))
b=matrix(NA,ncol=4,nrow=nrow(latlog))
colnames(a)=c("Count",ancname)
latlogtab=cbind(latlog$lat+(gra/2),latlog$log+(gra/2),a,b)
colnames(latlogtab)=c("LATITUDE","LONGITUDE","Count",ancname,"SAMPLE","AGE","SEX","SPECIES")
for(i in 1:nrow(latlogtab)){
ranks<-data[data$LONGITUDE>=latlog[i,2] & data$LONGITUDE<(latlog[i,2]+gra) &
data$LATITUDE>=latlog[i,1] & data$LATITUDE<(latlog[i,1]+gra),]
if(nrow(ranks)>0){
latlogtab[i,"Count"]=sum(ranks$Count,na.rm=T)
latlogtab[i,"SAMPLE"] =stringr::str_flatten(ranks$SAMPLE, collapse = ", ")
latlogtab[i,"AGE"] =mean(ranks$AGE, na.rm=T)
latlogtab[i,"SEX"] =stringr::str_flatten(ranks$SEX, collapse = ", ")
latlogtab[i,"SPECIES"] =stringr::str_flatten(ranks$SPECIES, collapse = ", ")
for(j in 1:length(ancname)){
latlogtab[i,ancname[j]]=as.numeric(round(mean(ranks[,ancname[j]],na.rm=T),2))
}
}
}
latlogtab=as.data.frame(latlogtab,stringsAsFactors=FALSE)
latlogtab$SITE=paste("Site",seq(1,nrow(latlogtab)),sep="")
latlogtab$SecondSite=paste("Site",seq(1,nrow(latlogtab)),sep="")
latlogtab$LATITUDE=as.numeric(latlogtab$LATITUDE)
latlogtab$LONGITUDE=as.numeric(latlogtab$LONGITUDE)
latlogtab$Count=as.numeric(latlogtab$Count)
latlogtab$AGE=as.numeric(latlogtab$AGE)
latlogtab=latlogtab[latlogtab$Count>0,]
as.data.frame(latlogtab,stringsAsFactors=FALSE)
}
}
gridmap(aa,4,"Y")
getsnpname=function(data){
unique(stringi::stri_replace_first_regex(stringi::stri_replace_last_regex(names(data)[grep("SNP_",names(data))],pattern="_[A,C,G,T,D]",replacement = ""),"SNP_",""))
}
gridmap(aa,4,"Y")
bb=gridmap(aa,4,"Y")
names(bb)
bb$Y_C
bb$LATITUDE
